/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RtspLink as PrismaRtspLink,
  Lift as PrismaLift,
} from "@prisma/client";

export class RtspLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RtspLinkCountArgs, "select">): Promise<number> {
    return this.prisma.rtspLink.count(args);
  }

  async rtspLinks(
    args: Prisma.RtspLinkFindManyArgs
  ): Promise<PrismaRtspLink[]> {
    return this.prisma.rtspLink.findMany(args);
  }
  async rtspLink(
    args: Prisma.RtspLinkFindUniqueArgs
  ): Promise<PrismaRtspLink | null> {
    return this.prisma.rtspLink.findUnique(args);
  }
  async createRtspLink(
    args: Prisma.RtspLinkCreateArgs
  ): Promise<PrismaRtspLink> {
    return this.prisma.rtspLink.create(args);
  }
  async updateRtspLink(
    args: Prisma.RtspLinkUpdateArgs
  ): Promise<PrismaRtspLink> {
    return this.prisma.rtspLink.update(args);
  }
  async deleteRtspLink(
    args: Prisma.RtspLinkDeleteArgs
  ): Promise<PrismaRtspLink> {
    return this.prisma.rtspLink.delete(args);
  }

  async getLift(parentId: string): Promise<PrismaLift | null> {
    return this.prisma.rtspLink
      .findUnique({
        where: { id: parentId },
      })
      .lift();
  }
}
