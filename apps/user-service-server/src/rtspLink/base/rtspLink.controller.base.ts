/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RtspLinkService } from "../rtspLink.service";
import { RtspLinkCreateInput } from "./RtspLinkCreateInput";
import { RtspLink } from "./RtspLink";
import { RtspLinkFindManyArgs } from "./RtspLinkFindManyArgs";
import { RtspLinkWhereUniqueInput } from "./RtspLinkWhereUniqueInput";
import { RtspLinkUpdateInput } from "./RtspLinkUpdateInput";

export class RtspLinkControllerBase {
  constructor(protected readonly service: RtspLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RtspLink })
  async createRtspLink(
    @common.Body() data: RtspLinkCreateInput
  ): Promise<RtspLink> {
    return await this.service.createRtspLink({
      data: {
        ...data,

        lift: data.lift
          ? {
              connect: data.lift,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        lift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RtspLink] })
  @ApiNestedQuery(RtspLinkFindManyArgs)
  async rtspLinks(@common.Req() request: Request): Promise<RtspLink[]> {
    const args = plainToClass(RtspLinkFindManyArgs, request.query);
    return this.service.rtspLinks({
      ...args,
      select: {
        createdAt: true,
        id: true,

        lift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RtspLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rtspLink(
    @common.Param() params: RtspLinkWhereUniqueInput
  ): Promise<RtspLink | null> {
    const result = await this.service.rtspLink({
      where: params,
      select: {
        createdAt: true,
        id: true,

        lift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RtspLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRtspLink(
    @common.Param() params: RtspLinkWhereUniqueInput,
    @common.Body() data: RtspLinkUpdateInput
  ): Promise<RtspLink | null> {
    try {
      return await this.service.updateRtspLink({
        where: params,
        data: {
          ...data,

          lift: data.lift
            ? {
                connect: data.lift,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          lift: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RtspLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRtspLink(
    @common.Param() params: RtspLinkWhereUniqueInput
  ): Promise<RtspLink | null> {
    try {
      return await this.service.deleteRtspLink({
        where: params,
        select: {
          createdAt: true,
          id: true,

          lift: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
