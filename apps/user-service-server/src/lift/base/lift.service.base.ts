/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Lift as PrismaLift,
  RtspLink as PrismaRtspLink,
  Building as PrismaBuilding,
} from "@prisma/client";

export class LiftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LiftCountArgs, "select">): Promise<number> {
    return this.prisma.lift.count(args);
  }

  async lifts(args: Prisma.LiftFindManyArgs): Promise<PrismaLift[]> {
    return this.prisma.lift.findMany(args);
  }
  async lift(args: Prisma.LiftFindUniqueArgs): Promise<PrismaLift | null> {
    return this.prisma.lift.findUnique(args);
  }
  async createLift(args: Prisma.LiftCreateArgs): Promise<PrismaLift> {
    return this.prisma.lift.create(args);
  }
  async updateLift(args: Prisma.LiftUpdateArgs): Promise<PrismaLift> {
    return this.prisma.lift.update(args);
  }
  async deleteLift(args: Prisma.LiftDeleteArgs): Promise<PrismaLift> {
    return this.prisma.lift.delete(args);
  }

  async findRtspLinks(
    parentId: string,
    args: Prisma.RtspLinkFindManyArgs
  ): Promise<PrismaRtspLink[]> {
    return this.prisma.lift
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rtspLinks(args);
  }

  async getBuilding(parentId: string): Promise<PrismaBuilding | null> {
    return this.prisma.lift
      .findUnique({
        where: { id: parentId },
      })
      .building();
  }
}
