/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lift } from "./Lift";
import { LiftCountArgs } from "./LiftCountArgs";
import { LiftFindManyArgs } from "./LiftFindManyArgs";
import { LiftFindUniqueArgs } from "./LiftFindUniqueArgs";
import { CreateLiftArgs } from "./CreateLiftArgs";
import { UpdateLiftArgs } from "./UpdateLiftArgs";
import { DeleteLiftArgs } from "./DeleteLiftArgs";
import { RtspLinkFindManyArgs } from "../../rtspLink/base/RtspLinkFindManyArgs";
import { RtspLink } from "../../rtspLink/base/RtspLink";
import { Building } from "../../building/base/Building";
import { LiftService } from "../lift.service";
@graphql.Resolver(() => Lift)
export class LiftResolverBase {
  constructor(protected readonly service: LiftService) {}

  async _liftsMeta(
    @graphql.Args() args: LiftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lift])
  async lifts(@graphql.Args() args: LiftFindManyArgs): Promise<Lift[]> {
    return this.service.lifts(args);
  }

  @graphql.Query(() => Lift, { nullable: true })
  async lift(@graphql.Args() args: LiftFindUniqueArgs): Promise<Lift | null> {
    const result = await this.service.lift(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lift)
  async createLift(@graphql.Args() args: CreateLiftArgs): Promise<Lift> {
    return await this.service.createLift({
      ...args,
      data: {
        ...args.data,

        building: args.data.building
          ? {
              connect: args.data.building,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lift)
  async updateLift(@graphql.Args() args: UpdateLiftArgs): Promise<Lift | null> {
    try {
      return await this.service.updateLift({
        ...args,
        data: {
          ...args.data,

          building: args.data.building
            ? {
                connect: args.data.building,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lift)
  async deleteLift(@graphql.Args() args: DeleteLiftArgs): Promise<Lift | null> {
    try {
      return await this.service.deleteLift(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RtspLink], { name: "rtspLinks" })
  async findRtspLinks(
    @graphql.Parent() parent: Lift,
    @graphql.Args() args: RtspLinkFindManyArgs
  ): Promise<RtspLink[]> {
    const results = await this.service.findRtspLinks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Building, {
    nullable: true,
    name: "building",
  })
  async getBuilding(@graphql.Parent() parent: Lift): Promise<Building | null> {
    const result = await this.service.getBuilding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
