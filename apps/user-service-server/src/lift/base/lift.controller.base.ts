/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LiftService } from "../lift.service";
import { LiftCreateInput } from "./LiftCreateInput";
import { Lift } from "./Lift";
import { LiftFindManyArgs } from "./LiftFindManyArgs";
import { LiftWhereUniqueInput } from "./LiftWhereUniqueInput";
import { LiftUpdateInput } from "./LiftUpdateInput";
import { RtspLinkFindManyArgs } from "../../rtspLink/base/RtspLinkFindManyArgs";
import { RtspLink } from "../../rtspLink/base/RtspLink";
import { RtspLinkWhereUniqueInput } from "../../rtspLink/base/RtspLinkWhereUniqueInput";

export class LiftControllerBase {
  constructor(protected readonly service: LiftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lift })
  async createLift(@common.Body() data: LiftCreateInput): Promise<Lift> {
    return await this.service.createLift({
      data: {
        ...data,

        building: data.building
          ? {
              connect: data.building,
            }
          : undefined,
      },
      select: {
        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        numberField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lift] })
  @ApiNestedQuery(LiftFindManyArgs)
  async lifts(@common.Req() request: Request): Promise<Lift[]> {
    const args = plainToClass(LiftFindManyArgs, request.query);
    return this.service.lifts({
      ...args,
      select: {
        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        numberField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lift(
    @common.Param() params: LiftWhereUniqueInput
  ): Promise<Lift | null> {
    const result = await this.service.lift({
      where: params,
      select: {
        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        numberField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLift(
    @common.Param() params: LiftWhereUniqueInput,
    @common.Body() data: LiftUpdateInput
  ): Promise<Lift | null> {
    try {
      return await this.service.updateLift({
        where: params,
        data: {
          ...data,

          building: data.building
            ? {
                connect: data.building,
              }
            : undefined,
        },
        select: {
          building: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          numberField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLift(
    @common.Param() params: LiftWhereUniqueInput
  ): Promise<Lift | null> {
    try {
      return await this.service.deleteLift({
        where: params,
        select: {
          building: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          numberField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rtspLinks")
  @ApiNestedQuery(RtspLinkFindManyArgs)
  async findRtspLinks(
    @common.Req() request: Request,
    @common.Param() params: LiftWhereUniqueInput
  ): Promise<RtspLink[]> {
    const query = plainToClass(RtspLinkFindManyArgs, request.query);
    const results = await this.service.findRtspLinks(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        lift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rtspLinks")
  async connectRtspLinks(
    @common.Param() params: LiftWhereUniqueInput,
    @common.Body() body: RtspLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rtspLinks: {
        connect: body,
      },
    };
    await this.service.updateLift({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rtspLinks")
  async updateRtspLinks(
    @common.Param() params: LiftWhereUniqueInput,
    @common.Body() body: RtspLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rtspLinks: {
        set: body,
      },
    };
    await this.service.updateLift({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rtspLinks")
  async disconnectRtspLinks(
    @common.Param() params: LiftWhereUniqueInput,
    @common.Body() body: RtspLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rtspLinks: {
        disconnect: body,
      },
    };
    await this.service.updateLift({
      where: params,
      data,
      select: { id: true },
    });
  }
}
