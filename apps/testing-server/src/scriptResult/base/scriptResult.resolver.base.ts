/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScriptResult } from "./ScriptResult";
import { ScriptResultCountArgs } from "./ScriptResultCountArgs";
import { ScriptResultFindManyArgs } from "./ScriptResultFindManyArgs";
import { ScriptResultFindUniqueArgs } from "./ScriptResultFindUniqueArgs";
import { CreateScriptResultArgs } from "./CreateScriptResultArgs";
import { UpdateScriptResultArgs } from "./UpdateScriptResultArgs";
import { DeleteScriptResultArgs } from "./DeleteScriptResultArgs";
import { ScriptResultService } from "../scriptResult.service";
@graphql.Resolver(() => ScriptResult)
export class ScriptResultResolverBase {
  constructor(protected readonly service: ScriptResultService) {}

  async _scriptResultsMeta(
    @graphql.Args() args: ScriptResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScriptResult])
  async scriptResults(
    @graphql.Args() args: ScriptResultFindManyArgs
  ): Promise<ScriptResult[]> {
    return this.service.scriptResults(args);
  }

  @graphql.Query(() => ScriptResult, { nullable: true })
  async scriptResult(
    @graphql.Args() args: ScriptResultFindUniqueArgs
  ): Promise<ScriptResult | null> {
    const result = await this.service.scriptResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScriptResult)
  async createScriptResult(
    @graphql.Args() args: CreateScriptResultArgs
  ): Promise<ScriptResult> {
    return await this.service.createScriptResult({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ScriptResult)
  async updateScriptResult(
    @graphql.Args() args: UpdateScriptResultArgs
  ): Promise<ScriptResult | null> {
    try {
      return await this.service.updateScriptResult({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScriptResult)
  async deleteScriptResult(
    @graphql.Args() args: DeleteScriptResultArgs
  ): Promise<ScriptResult | null> {
    try {
      return await this.service.deleteScriptResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
