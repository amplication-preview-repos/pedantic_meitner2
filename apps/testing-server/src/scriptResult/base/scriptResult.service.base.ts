/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ScriptResult as PrismaScriptResult } from "@prisma/client";

export class ScriptResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScriptResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scriptResult.count(args);
  }

  async scriptResults(
    args: Prisma.ScriptResultFindManyArgs
  ): Promise<PrismaScriptResult[]> {
    return this.prisma.scriptResult.findMany(args);
  }
  async scriptResult(
    args: Prisma.ScriptResultFindUniqueArgs
  ): Promise<PrismaScriptResult | null> {
    return this.prisma.scriptResult.findUnique(args);
  }
  async createScriptResult(
    args: Prisma.ScriptResultCreateArgs
  ): Promise<PrismaScriptResult> {
    return this.prisma.scriptResult.create(args);
  }
  async updateScriptResult(
    args: Prisma.ScriptResultUpdateArgs
  ): Promise<PrismaScriptResult> {
    return this.prisma.scriptResult.update(args);
  }
  async deleteScriptResult(
    args: Prisma.ScriptResultDeleteArgs
  ): Promise<PrismaScriptResult> {
    return this.prisma.scriptResult.delete(args);
  }
}
